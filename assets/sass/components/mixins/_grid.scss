@mixin break-to($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media only screen and (min-width: #{map-get($breakpoints, $breakpoint) + 1}) {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
	}
}

@mixin make-container($container-min-width) {
	@each $key, $breakpoint in $breakpoints {
		@include break-to($key) {
			$i: index($breakpoints, ($key $breakpoint));
			& {
				width: $container-min-width - ($i * 5);
			}
		}
	}
}

@mixin reset-offset {
	margin-left: auto;
	left: auto;
	right: auto;
}

@mixin grid-actions($size, $i, $spacing) {
	&.offset-#{$size}#{$i} {
		margin-left: $spacing;
	}
	&.pull-#{$size}#{$i} {
		right: $spacing;
	}
	&.push-#{$size}#{$i} {
		left: $spacing;
	}
}


@mixin make-columns($key) {
	@for $i from 1 through $num-cols {
		$column-width: unquote((100 / ($num-cols / $i)) + "%");
		&.#{$key}#{$i} {
			width: $column-width;
			@include reset-offset;
		}
	}
}

@mixin make-grid-actions($key) {
		@for $i from 1 through $num-cols {
			$col-width: unquote((100 / ($num-cols / $i)) + "%");
			@include grid-actions("#{$key}", $i, $col-width);
		}
}

@mixin make-breakpoints() {
	$keyList: append(map-keys($breakpoints), "xl", comma);
	@each $key, $breakpoint in $keyList {
		$firstKey: first($keyList);
		@if $firstKey == $key {
			@include make-columns($firstKey);
		}
		@include break-to($key) {
			$nextKey: next($keyList, $key);
			@include make-columns($nextKey);
			@include make-grid-actions($nextKey);
		}
	}
}
